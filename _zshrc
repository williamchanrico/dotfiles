# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Function path
fpath=(
	"$HOME/.zsh_completion/zchee_zsh-completions/src/go"
	"$HOME/.zsh_completion/zchee_zsh-completions/src/zsh"
	$fpath
)

# PATH environment variables
export PATH=$HOME/bin:/usr/local/bin:$HOME/.local/bin:$PATH

# Path to oh-my-zsh installation.
export ZSH=/home/william/.oh-my-zsh

# Enable virtualenv prompt
export VIRTUAL_ENV_DISABLE_PROMPT=0

# Different options for virtual consoles
if [ "$TERM" = "linux" ]; then
	ZSH_THEME="refined"
else
	# ZSH_THEME="mytheme"
	ZSH_THEME=powerlevel10k/powerlevel10k
fi

export EDITOR=vim
export VISUAL=vim
export BROWSER=google-chrome-stable

# Display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Load oh-my-zsh plugins
plugins=(
	git kubectl helm aws tmux fzf fzf-tab gitignore gcloud
	dirhistory last-working-dir redis-cli z zsh-autosuggestions
	# zsh-completions
)
autoload -U compinit && compinit

# zsh-autosuggestions
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
export ZSH_AUTOSUGGEST_USE_ASYNC=true

export DISABLE_UPDATE_PROMPT=true

source $ZSH/oh-my-zsh.sh

# From zsh-syntax-highlighting package
# sudo pacman -S zsh-syntax-highlighting
# source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

###################
#   Keybindings   #
###################

# Use vi navigation keys in menu completion
zstyle ':completion:*' menu select
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Use CTRL+p and CTRL+n instead of arrow keys
bindkey "^p" up-line-or-beginning-search
bindkey "^n" down-line-or-beginning-search

###################
# Auto-completion #
###################

# AWS
if [ -f /usr/bin/aws_zsh_completer.sh ]; then
	source /usr/bin/aws_zsh_completer.sh
fi

# Hashicorp Vault
if [ -x "$(command -v vault)" ]; then
	complete -o nospace -C '/usr/bin/vault' vault
fi

# Alibaba Cloud https://github.com/aliyun/aliyun-cli
if [ -x "$(command -v aliyun)" ]; then
	complete -o nospace -F '/home/william/bin/aliyun' aliyun
fi

# History
export HISTSIZE=10000000
export SAVEHIST=$HISTSIZE

#############
# Functions #
#############

# Query IP information
ipinfo() {
	curl ipinfo.io/$1
}

# Kubectl get NodePort address
kubenp() {
	# $1 namespace, $2 svc
	NODE_PORT=$(kubectl get --namespace "$1" -o jsonpath="{.spec.ports[0].nodePort}" services "$2")
	NODE_IP=$(kubectl get nodes --namespace "$1" -o jsonpath="{.items[0].status.addresses[0].address}")
	echo http://$NODE_IP:$NODE_PORT
}

# Work ssh wrapper
tkp-ssh() {
	address="${@: -1}"
	address="${1//-/.}"

	cmd="ssh"
	# if [ -x "$(command -v sshrc)" ]; then
	#     cmd="sshrc"
	# fi

	if [[ $2 == "s" ]]; then
		echo "Staging root@$address"
		$cmd -oStrictHostKeyChecking=no -i ~/.ssh/tokopedia-staging.pem root@$address
	elif [[ $2 == "ss" ]]; then
		echo "New Staging root@$address"
		$cmd -oStrictHostKeyChecking=no -i ~/.ssh/tkpd-ali-main-sg-stag-root.pem root@$address
	elif [[ $2 == "u" ]]; then
		echo "Production ubuntu@$address"
		$cmd -oStrictHostKeyChecking=no -i ~/.ssh/tokopedia-prod.pem ubuntu@$address
	else
		echo "Production root@$address"
		shift
		$cmd -oStrictHostKeyChecking=no -i ~/.ssh/tokopedia-prod.pem root@$address $@
	fi
}

socks() {
	if [[ -z "$(command -v tmux)" ]]; then
		echo "Tmux is not installed"
		return 1
	fi

	SOCKS_TMUX_SESSION_NAME=socks
	tmux kill-session -t "$SOCKS_TMUX_SESSION_NAME" >/dev/null 2>&1
	tmux new-session -s "$SOCKS_TMUX_SESSION_NAME" -d 'ssh -D 8080 william@arzhon-vps.arzhon.id'
	tmux split-window -t "$SOCKS_TMUX_SESSION_NAME" -v 'iftop -c ~/.iftoprc -f "port ssh"' # Need cap_net_raw=eip cap
	tmux select-pane -t "$SOCKS_TMUX_SESSION_NAME:1.1"
	tmux -2 attach-session -t "$SOCKS_TMUX_SESSION_NAME" -d
}

myxrandr() {
	if [[ -z "$(command -v xrandr)" ]]; then
		echo "Xrandr is not installed"
		return 1
	fi

	if [ $# -ne 1 ]; then
		echo "usage: $0 PRESET"
		return 1
	fi

	MYXRANDR_PRESET="${1:-reset}"

	case "$MYXRANDR_PRESET" in
		reset)
			xrandr -s 0
			xrandr --auto
			return 0
			;;

		home)
			myxrandr reset
			xrandr --output HDMI-0 --primary --auto
			;;

		work)
			myxrandr reset
			# xrandr --output DP1 -s 2560x1440 --primary --auto --output eDP1 --left-of DP1
			# xrandr --output eDP1 --mode 1920x1080 --pos 0x0 --rotate normal --output DP1 --primary --mode 1920x1080 --pos 3840x0 --rotate normal --output HDMI1 --mode 1920x1080 --pos 1920x0 --rotate normal --output HDMI2 --off --output VIRTUAL1 --off
			xrandr --output eDP1 --primary --mode 1920x1080 --pos 0x0 --rotate normal --output DP1 --off --output HDMI1 --mode 1920x1080 --pos 1920x0 --rotate normal --output HDMI2 --off --output VIRTUAL1 --off
			;;

		lt)
			myxrandr reset
			xrandr --output eDP1 --auto
			;;
	esac

	echo "Using preset: $MYXRANDR_PRESET"
}

################
# Prompt setup #
################

export KUBE_PS1_ENABLED=off
kubeon() {
	KUBE_PS1_ENABLED=on
	p10k_reload
}

kubeoff() {
	KUBE_PS1_ENABLED=off
	p10k_reload
}

venvon() {
	source ${1:-venv/bin/activate}
	p10k_reload
}

venvoff() {
	deactivate
	p10k_reload
}


########################
# Other programs setup #
########################

# Kubectl Prompt (REPLACED BY POWERLEVEL10K)
# if [ -f ~/.oh-my-zsh/custom/plugins/kube-ps1/kube-ps1.sh ]; then
#     source ~/.oh-my-zsh/custom/plugins/kube-ps1/kube-ps1.sh
#     KUBE_PS1_PREFIX=$''
#     KUBE_PS1_PREFIX_COLOR=black
#     KUBE_PS1_SUFFIX=$'\0'
#     KUBE_PS1_SUFFIX_COLOR=black
#     KUBE_PS1_CTX_COLOR=red
#     KUBE_PS1_NS_COLOR=black
#     KUBE_PS1_SYMBOL_ENABLE=true
#     KUBE_PS1_SYMBOL_COLOR=black
#     KUBE_PS1_DIVIDER=":"
#     KUBE_PS1_SEPARATOR=""
#     KUBE_PS1_ENABLED=off
# fi

# Alicloud
source ~/.aliyun/.rc

# Go directory env
export GOPATH=/home/william/go
export GOBIN=/home/william/go/bin
export PATH=$GOBIN:$PATH

# Restic Backup Setup
export RESTIC_REPOSITORY=/run/media/william/HD-E1/backup/personal

# Ruby Setup. RVM to PATH for scripting. Make sure this is the last PATH variable change.
# export PATH="$PATH:$HOME/.rvm/bin"
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# Set up Node Version Manager
# export NVM_DIR="$HOME/.nvm"
# export NVM_SOURCE="/usr/share/nvm"	# The AUR package installs it to here.
# [ -s "$NVM_SOURCE/nvm.sh" ] && . "$NVM_SOURCE/nvm.sh"	# Load NVM

# Setup NPM user-wide installation, but are replaced by nvm specific
# PATH="$HOME/.node_modules/bin:$PATH"
# export npm_config_prefix=~/.node_modules

# Set up Composer
export PATH=$HOME/.config/composer/vendor/bin:$PATH

# Set up kubectl plugin krew
if [[ -x "$(command -v kubectl-krew)" ]]; then
	export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi

# Setup Terragrunt Cache Download Directory
export TERRAGRUNT_DOWNLOAD="$HOME/.terragrunt-cache"

# Wine
export BASE_WINEPREFIX64="$HOME/.wine-prefixes/64bit"
export BASE_WINEPREFIX32="$HOME/.wine-prefixes/32bit"
# Defaults
export WINEARCH="win64"
export WINEPREFIX="${BASE_WINEPREFIX64}/default"

# Naver Line
export WINE_LINE="WINEPREFIX=${BASE_WINEPREFIX64}/naver-line WINEARCH=win64"
alias winecfg-line="env $WINE_LINE winecfg"
alias winetricks-line="env $WINE_LINE winetricks line"
alias wine-line="dex ~/LINE.desktop"

###########
# Aliases #
###########

# Use neovim if available
if [[ -x "$(command -v nvim)" ]]; then
	alias vim="nvim"
	alias vi="nvim"
fi

# Ntfy to send push notification, token is stored in ~/.ntfy.yml
# Mobile pushbullet identifier: ujviRNYx41csjAiVsKnSTs
alias nf="ntfy"
alias nfmb="ntfy -o device_iden ujviRNYx41csjAiVsKnSTs -b pushbullet"

# SSH
# if [[ -x $(command -v sshrc) ]]; then
#     alias ssh="sshrc"
#     compdef sshrc='ssh'
# fi

# Yeecli to control Yee Lightbulb
alias yee="yeecli"
alias yeeb="yeecli brightness"
alias yeet="yeecli toggle"
alias yeew="yeecli rgb FFFFFF"
alias yeeo="yeecli rgb FFFFFF && yeecli temperature 4500"
alias yeer="yeecli rgb FF6600 && yeeb 50"

# Turn off display
alias dpoff="xset dpms force off"

# Suspend
alias spnd="systemctl suspend"

# Change dirs
alias cdgo="cd $GOPATH/src"
alias cdgoo="cd $GOPATH/src/github.com/williamchanrico"
alias cdgot="cd $GOPATH/src/github.com/tokopedia"
alias cdwork="cd ~/work"

# Better ls
alias ls="ls --color=auto --group-directories-first"

# Easy open from terminal
alias o="xdg-open"

# Sometimes used to bypass aliases
alias c="command"

# Terraform and Terragrunt
alias tf="terraform"
alias tg="terragrunt"

# Webcam Access
alias wcam="mpv --demuxer-lavf-format video4linux2 --demuxer-lavf-o-set input_format=mjpeg av://v4l2:/dev/video0"

# SQLFormat
alias sqlformat="sqlformat --reindent --keywords upper --identifiers lower"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
p10k_reload(){
	[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
}
p10k_reload

if [ -f "/opt/google-cloud-sdk/completion.zsh.inc" ]; then source "/opt/google-cloud-sdk/completion.zsh.inc"; fi
