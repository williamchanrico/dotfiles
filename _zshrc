# Oh-my-zsh installation path
ZSH=/usr/share/oh-my-zsh/

# Enable virtualenv prompt
export VIRTUAL_ENV_DISABLE_PROMPT=0

# PATH environment variables
export PATH=$HOME/bin:/usr/local/bin:$HOME/.local/bin:$PATH

# Display red dots whilst waiting for completion.
export COMPLETION_WAITING_DOTS="true"

# Keyring                                                                                                                            │    │
export SSH_AUTH_SOCK=$XDG_RUNTIME_DIR/gcr/ssh

# Powerlevel10k theme path
source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme

# List of plugins used
plugins=( git sudo zsh-256color zsh-completions zsh-syntax-highlighting
	fzf fzf-tab gcloud gitignore helm tmux dirhistory last-working-dir redis-cli)
source $ZSH/oh-my-zsh.sh

# In case a command is not found, try to find the package that has it
function command_not_found_handler {
    local purple='\e[1;35m' bright='\e[0;1m' green='\e[1;32m' reset='\e[0m'
    printf 'zsh: command not found: %s\n' "$1"
    local entries=( ${(f)"$(/usr/bin/pacman -F --machinereadable -- "/usr/bin/$1")"} )
    if (( ${#entries[@]} )) ; then
        printf "${bright}$1${reset} may be found in the following packages:\n"
        local pkg
        for entry in "${entries[@]}" ; do
            local fields=( ${(0)entry} )
            if [[ "$pkg" != "${fields[2]}" ]]; then
                printf "${purple}%s/${bright}%s ${green}%s${reset}\n" "${fields[1]}" "${fields[2]}" "${fields[3]}"
            fi
            printf '    /%s\n' "${fields[4]}"
            pkg="${fields[2]}"
        done
    fi
    return 127
}

# Detect AUR wrapper
if pacman -Qi yay &>/dev/null; then
   aurhelper="yay"
elif pacman -Qi paru &>/dev/null; then
   aurhelper="paru"
fi

function in {
    local -a inPkg=("$@")
    local -a arch=()
    local -a aur=()

    for pkg in "${inPkg[@]}"; do
        if pacman -Si "${pkg}" &>/dev/null; then
            arch+=("${pkg}")
        else
            aur+=("${pkg}")
        fi
    done

    if [[ ${#arch[@]} -gt 0 ]]; then
        sudo pacman -S "${arch[@]}"
    fi

    if [[ ${#aur[@]} -gt 0 ]]; then
        ${aurhelper} -S "${aur[@]}"
    fi
}

# zsh-autosuggestions
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
export ZSH_AUTOSUGGEST_USE_ASYNC=true
export DISABLE_UPDATE_PROMPT=true
export DISABLE_MAGIC_FUNCTIONS=true

export EDITOR=vim
export VISUAL=vim

# Use neovim if available
if [[ -x "$(command -v nvim)" ]]; then
    alias vim="nvim"
    alias vi="nvim"
    export EDITOR=nvim
    export VISUAL=nvim
fi

export BROWSER=google-chrome-stable

# Use eza if available
if [[ -x "$(command -v eza)" ]]; then
       alias ls='eza --color=always --group-directories-first'
fi

###################
#   Keybindings   #
###################

# Use vi navigation keys in menu completion
zstyle ':completion:*' menu select
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Use CTRL+p and CTRL+n instead of arrow keys
bindkey "^p" up-line-or-beginning-search
bindkey "^n" down-line-or-beginning-search

# Adjust file listing colors for other-writables
export LS_COLORS="$LS_COLORS:ow=1;34;107:tw=1;34:"


########################
# Other programs setup #
########################

# Alicloud
# source ~/.aliyun/.rc

# Go directory env
export GOPATH=/home/william/go
export GOBIN=/home/william/go/bin
export GOPRIVATE=github.com/tokopedia
export PATH=$GOBIN:$PATH

# Restic Backup Setup
export RESTIC_REPOSITORY=/run/media/william/HD-E1/backup/personal

# Ruby Setup. RVM to PATH for scripting. Make sure this is the last PATH variable change.
# export PATH="$PATH:$HOME/.rvm/bin"
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# Set up Node Version Manager
# export NVM_DIR="$HOME/.nvm"
# export NVM_SOURCE="/usr/share/nvm"	# The AUR package installs it to here.
# [ -s "$NVM_SOURCE/nvm.sh" ] && . "$NVM_SOURCE/nvm.sh"	# Load NVM

# Setup NPM user-wide installation, but are replaced by nvm specific
PATH="$HOME/.node_modules/bin:$PATH"
export npm_config_prefix=~/.node_modules

# Set up Composer
export PATH=$HOME/.config/composer/vendor/bin:$PATH

# Set up kubectl plugin krew
if [[ -x "$(command -v kubectl-krew)" ]]; then
	export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi
export USE_GKE_GCLOUD_AUTH_PLUGIN=True

# Setup Terragrunt Cache Download Directory
export TERRAGRUNT_DOWNLOAD="$HOME/.terragrunt-cache"

# Wine
export BASE_WINEPREFIX64="$HOME/.wine-prefixes/64bit"
export BASE_WINEPREFIX32="$HOME/.wine-prefixes/32bit"
# Defaults
export WINEARCH="win64"
export WINEPREFIX="${BASE_WINEPREFIX64}/default"

# Naver Line
export WINE_LINE="WINEPREFIX=${BASE_WINEPREFIX64}/naver-line WINEARCH=win64"
alias winecfg-line="env $WINE_LINE winecfg"
alias winetricks-line="env $WINE_LINE winetricks line"
# Replace with ~/bin/wine-line script
# alias wine-line="dex ~/LINE.desktop"

# Gcloud (https://cloud.google.com/sdk/crypto#cloudsdk_python_sitepackages=1)
export CLOUDSDK_PYTHON_SITEPACKAGES=1

# Password Store
export PASSWORD_STORE_CHARACTER_SET='[:alnum:].,!?&*%_$#^@{}[]()<>/\+'


###################
# Auto-completion #
###################

# AWS
if [ -f /usr/bin/aws_zsh_completer.sh ]; then
	source /usr/bin/aws_zsh_completer.sh
fi

# Hashicorp Vault
if [ -x "$(command -v vault)" ]; then
	complete -o nospace -C '/usr/bin/vault' vault
fi

# Alibaba Cloud https://github.com/aliyun/aliyun-cli
if [ -x "$(command -v aliyun)" ]; then
	complete -o nospace -F '/home/william/bin/aliyun' aliyun
fi

# History
export HISTSIZE=10000000
export SAVEHIST=$HISTSIZE

#############
# Functions #
#############

# Open Yazi allowing cd into directory on exit.
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Query IP information
ipinfo() {
	curl ipinfo.io/$1
}

# Kubectl get NodePort address
kubenp() {
	# $1 namespace, $2 svc
	NODE_PORT=$(kubectl get --namespace "$1" -o jsonpath="{.spec.ports[0].nodePort}" services "$2")
	NODE_IP=$(kubectl get nodes --namespace "$1" -o jsonpath="{.items[0].status.addresses[0].address}")
	echo http://$NODE_IP:$NODE_PORT
}

socks() {
	if [[ -z "$(command -v tmux)" ]]; then
		echo "Tmux is not installed"
		return 1
	fi

	SOCKS_TMUX_SESSION_NAME=socks
	tmux kill-session -t "$SOCKS_TMUX_SESSION_NAME" >/dev/null 2>&1
	tmux new-session -s "$SOCKS_TMUX_SESSION_NAME" -d 'ssh -D 8080 william@vps.arzhon.id'
	tmux split-window -t "$SOCKS_TMUX_SESSION_NAME" -v 'iftop -c ~/.iftoprc -f "port ssh or port 2222"' # Need cap_net_raw=eip cap
	tmux select-pane -t "$SOCKS_TMUX_SESSION_NAME:1.1"
	tmux -2 attach-session -t "$SOCKS_TMUX_SESSION_NAME" -d
}

###########
# Aliases #
###########

alias c='clear' # clear terminal

# Directory navigation shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# Always mkdir a path (this doesn't inhibit functionality to make a single dir)
alias mkdir='mkdir -p'

# Webcam Access
alias wcam="mpv --demuxer-lavf-format video4linux2 --demuxer-lavf-o-set input_format=mjpeg av://v4l2:/dev/video0"

# SQLFormat
alias sqlformat="sqlformat --reindent --keywords upper --identifiers lower"

# Terraform
alias tf-auth="export GOOGLE_OAUTH_ACCESS_TOKEN=\$(gcloud auth print-access-token)"

# SSH Term
alias ssh='TERM=xterm ssh'

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Display Pokemon
# pokemon-colorscripts --no-title -r 1,3,6

# Zoxide
eval "$(zoxide init zsh)"
